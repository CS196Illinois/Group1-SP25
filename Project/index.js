const express = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const { PdfReader } = require('pdfreader');
const app = express();
const port = 3001;

const storage = multer.diskStorage({
  destination: function(req, file, cb) {
    const uploadDir = path.join(__dirname, 'uploads');
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir);
    }
    cb(null, uploadDir);
  },
  filename: function(req, file, cb) {
    cb(null, Date.now() + '-' + file.originalname);
  }
});

const upload = multer({ 
  storage: storage,
  fileFilter: function(req, file, cb) {
    if (file.mimetype !== 'application/pdf') {
      return cb(new Error('Only PDFs are allowed'));
    }
    cb(null, true);
  }
});

app.use(express.static('public'));

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

app.post('/submit-resume', upload.single('resumeFile'), (req, res) => {
  if (!req.file) {
    return res.status(400).send('No file uploaded');
  }
  
  const name = req.body.name;
  const style = req.body.style;
  const filePath = req.file.path;
  
  const submissionId = Date.now().toString();
  
  const submissionData = {
    id: submissionId,
    name: name,
    style: style,
    filePath: filePath,
    timestamp: new Date().toISOString()
  };
  
  const dataDir = path.join(__dirname, 'data');
  if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir);
  }
  fs.writeFileSync(
    path.join(dataDir, `${submissionId}.json`), 
    JSON.stringify(submissionData, null, 2)
  );
  
  extractTextFromPDF(filePath, (text) => {
    // Store the extracted text
    fs.writeFileSync(
      path.join(dataDir, `${submissionId}-content.txt`),
      text
    );
    
    // Generate the website
    generateWebsite(submissionData, text, (websiteUrl) => {
      // Redirect to the success page
      res.redirect(`/success?id=${submissionId}&url=${encodeURIComponent(websiteUrl)}`);
    });
  });
});

// Simple PDF text extraction 
function extractTextFromPDF(pdfPath, callback) {
  let textContent = '';
  
  new PdfReader().parseFileItems(pdfPath, (err, item) => {
    if (err) console.error(err);
    else if (!item) callback(textContent); // End of file
    else if (item.text) textContent += item.text + ' ';
  });
}

// Generate website 
function generateWebsite(submissionData, resumeText, callback) {
  const { id, name, style } = submissionData;
  
  // Create website directory
  const sitesDir = path.join(__dirname, 'public', 'sites');
  if (!fs.existsSync(sitesDir)) {
    fs.mkdirSync(sitesDir);
  }
  
  const siteDir = path.join(sitesDir, id);
  if (!fs.existsSync(siteDir)) {
    fs.mkdirSync(siteDir);
  }
  
  // Very simple template 
  const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>${name}'s Resume Website</title>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <link rel="stylesheet" href="/templates/${style}.css">
    </head>
    <body>
      <header>
        <h1>${name}</h1>
        <p>Professional Profile</p>
      </header>
      
      <main>
        <section class="resume-content">
          <pre>${resumeText}</pre>
        </section>
      </main>
      
      <footer>
        <p>Generated by Resume Website Generator</p>
      </footer>
    </body>
    </html>
  `;
  
  // Write the HTML file
  fs.writeFileSync(path.join(siteDir, 'index.html'), htmlContent);
  
  // Return the URL to the generated website
  const websiteUrl = `/sites/${id}/index.html`;
  callback(websiteUrl);
}

// Success page
app.get('/success', (req, res) => {
  const id = req.query.id;
  const url = req.query.url;
  
  res.send(`
    <h1>Success!</h1>
    <p>Your resume website has been created.</p>
    <p><a href="${url}" target="_blank">View Your Website</a></p>
  `);
});

// Start the server
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});